1) Preprocessor options:
     Now all in 'Makefile' and reduced to a minimum.

2) option 'coudoub3D':
     This option has been moved to a '#define' inside the Coulomb
     package such that it can be chanegd onyl by nerds.

3) finite differences:
     Has been seperated as far as possible. Will be skipped in
     public version while being kept in an archive version.
     The 'findiff.F90' has been moved to an own subdirectory to
     disentangle mainstream from secondary options.
     Finite difference requires new testing in case they are revived.

4) raregas:
     This option will be skipped in public version. All specific
     subroutines have been moved  to subdirectory 'QMMM' to
     disentangle them from the mainstream routines.
 
5) 'calc_projFine':
     This version presently only for electronic part, not yet
     in ionic force. Should we put it there also?

6) preprocessor options 'simpar' and 'paraworld':
     Have been removed. 

7) Subroutine 'mergetabs':
     What is this routine doing?

8) Pseudo-potentials:
    a) The 'pseudogead.F90', 'pseudosoft.F90', and 'nonloc.DF90' should
       be combined to a module 'pseudo' with 'pseudo.F90' as header.
       Implementation of 'nonloc.F90' may raise difficulties due to
       REAL and COMPLEX versions.
    b) Interpolation to finer mesh should be checked carefully.

9) File 'localize.F90':
    a) Array 'rho' not used. Check and remove.
    b) Check dynamical case.

10) Routine 'leapfr' in 'ionmd.F90':
     List variable 'ityp' obsolete without QMMM. Skip or what?

11) Ionic motion:
     Do want have both leap-frog and velocity Verlet?

12) In 'init.F90':
     a) Initialization of local PsP for Ar etc to be checked. Skip if
        not precise enough.
     b) 'init_homfield' seems to do the same as 'dipx,dipy,dipz'?
       Check and remove one if found doubling.

13) Routine 'laserf' in 'forces.F90':
     This routine re-evaluates the actual field strength which was
     already computed in he electronic routine. 
     ==> Doubling with danger of inconcsistence. Unify!

14) Routine 'kinprop' in 'fft.F90':
     3D propagator involves copies 1D <--> 3D storage. Can that be
     avoided by equivalencing via TARGET attribute?

15) Copy routines in 'fft.F90':
     Two versions 'copy...' and 'secopy...' differ by index
     computation. Check speed and maintain the faster version.


16) Routine 'dyn_propag' in 'dynamic.F90':
     Check te call to 'calclocal' after ionic propagation.


17) Routine 'nonlocstep' in 'dynamic.F90':
     This routine is slow. Consider replacing it by exact exponential
     in projector sub-space.

18) Routine 'savings'  in 'dynamic.F90':
     Save status before CPU time exceeds bounds. May be skipped?

19) File 'attachement.F90':
     Option of electron attachement should be removed from the
     public version.

*****************************************************************

Code cleaning:


Cleaned:
   main.F90

Subroutines checked and commented:
   zeroforce.F90
   util.F90
   static.F90
   subgrids.F90
   sicnew.F90
   schmid.F90
   rho.F90
   restart.F90
   pseudo.F90
   pseudosoft.F90
   pseudogoed.F90
   params.F90
   parallele.F90
   orthmat.F90
   nonloc.F90
   loc_mfield.F90
   localize.F90
   lda.F90
   kinetic.F90   
   ionmd.F90
   init.F90
   givens.F90
   fft.F90
   fftpack*.F90
   falr.F90
   dynamic.F90
   coulsolv.F90
   coulex.F90
   carlo.F90
   attachement.F90
