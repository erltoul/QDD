# Makefile.in generated by automake 1.14.1 from Makefile.am.
# @configure_input@

# Copyright (C) 1994-2013 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

VPATH = @srcdir@
am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :

#Add Static linking
@USE_STATIC_TRUE@am__append_1 = $(STATIC)

#Add MPI linkerflags
@USE_MPI_TRUE@am__append_2 = $(LD_MPI)

#Add FFTW Linkerflags
@CALLS_FFTW_TRUE@am__append_3 = $(LD_FFTW)
#Add CUDA linkerflags
@USE_CUDA_TRUE@am__append_4 = $(LD_CUDA)
#sic-conditional objects:
@USE_TWOSTSIC_TRUE@am__append_5 = 2stUTc.$(OBJEXT) localize_rad.$(OBJEXT)
@USE_CUDA_FALSE@@USE_FFTW_FALSE@@USE_MKL_FALSE@@USE_NETLIB_TRUE@bin_PROGRAMS = $(top_builddir)/bin/netlib_pwteleman$(EXEEXT)
@USE_CUDA_FALSE@@USE_FFTW_FALSE@@USE_MKL_TRUE@bin_PROGRAMS = $(top_builddir)/bin/mkl_pwteleman$(EXEEXT)
@USE_CUDA_FALSE@@USE_FFTW_TRUE@bin_PROGRAMS = $(top_builddir)/bin/fftw_pwteleman$(EXEEXT)
@USE_CUDA_TRUE@bin_PROGRAMS =  \
@USE_CUDA_TRUE@	$(top_builddir)/bin/gpu_pwteleman$(EXEEXT)
subdir = code/source_f90
DIST_COMMON = $(srcdir)/Makefile.in $(srcdir)/Makefile.am
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/FL_CHECK_FFTW_LIBS.m4 \
	$(top_srcdir)/m4/FL_CHECK_MKL_LIBS.m4 \
	$(top_srcdir)/m4/FL_CHECK_MPIF_HEADER.m4 \
	$(top_srcdir)/m4/FL_CHECK_OS.m4 \
	$(top_srcdir)/m4/FL_LOCATE_CUDA.m4 \
	$(top_srcdir)/m4/FL_READ_DEF.m4 \
	$(top_srcdir)/m4/FL_READ_HEADER.m4 $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/define.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
PROGRAMS = $(bin_PROGRAMS)
am____top_builddir__bin_fftw_pwteleman_SOURCES_DIST = main.F90
@USE_FFTW_TRUE@am___top_builddir__bin_fftw_pwteleman_OBJECTS = __top_builddir__bin_fftw_pwteleman-main.$(OBJEXT)
__top_builddir__bin_fftw_pwteleman_OBJECTS =  \
	$(am___top_builddir__bin_fftw_pwteleman_OBJECTS)
am__DEPENDENCIES_1 =
@USE_MPI_TRUE@am__DEPENDENCIES_2 = $(am__DEPENDENCIES_1)
@CALLS_FFTW_TRUE@am__DEPENDENCIES_3 = $(am__DEPENDENCIES_1)
@USE_CUDA_TRUE@am__DEPENDENCIES_4 = $(am__DEPENDENCIES_1)
am__DEPENDENCIES_5 = $(am__DEPENDENCIES_2) $(am__DEPENDENCIES_3) \
	$(am__DEPENDENCIES_4)
@USE_FFTW_TRUE@__top_builddir__bin_fftw_pwteleman_DEPENDENCIES =  \
@USE_FFTW_TRUE@	$(OBJFFTW) $(OBJCOULSOLV) $(OBJCOMMON) \
@USE_FFTW_TRUE@	$(am__DEPENDENCIES_5)
__top_builddir__bin_fftw_pwteleman_LINK = $(FCLD) \
	$(__top_builddir__bin_fftw_pwteleman_FCFLAGS) $(FCFLAGS) \
	$(__top_builddir__bin_fftw_pwteleman_LDFLAGS) $(LDFLAGS) -o $@
am__dirstamp = $(am__leading_dot)dirstamp
am____top_builddir__bin_gpu_pwteleman_SOURCES_DIST = main.F90
@USE_CUDA_TRUE@am___top_builddir__bin_gpu_pwteleman_OBJECTS = __top_builddir__bin_gpu_pwteleman-main.$(OBJEXT)
__top_builddir__bin_gpu_pwteleman_OBJECTS =  \
	$(am___top_builddir__bin_gpu_pwteleman_OBJECTS)
@USE_CUDA_TRUE@__top_builddir__bin_gpu_pwteleman_DEPENDENCIES =  \
@USE_CUDA_TRUE@	$(OBJCUDA) $(OBJCOMMON) $(am__DEPENDENCIES_5)
__top_builddir__bin_gpu_pwteleman_LINK = $(FCLD) \
	$(__top_builddir__bin_gpu_pwteleman_FCFLAGS) $(FCFLAGS) \
	$(__top_builddir__bin_gpu_pwteleman_LDFLAGS) $(LDFLAGS) -o $@
am____top_builddir__bin_mkl_pwteleman_SOURCES_DIST = main.F90
@USE_MKL_TRUE@am___top_builddir__bin_mkl_pwteleman_OBJECTS = __top_builddir__bin_mkl_pwteleman-main.$(OBJEXT)
__top_builddir__bin_mkl_pwteleman_OBJECTS =  \
	$(am___top_builddir__bin_mkl_pwteleman_OBJECTS)
@USE_MKL_TRUE@__top_builddir__bin_mkl_pwteleman_DEPENDENCIES =  \
@USE_MKL_TRUE@	$(OBJFFTW) $(OBJCOULSOLV) $(OBJCOMMON) \
@USE_MKL_TRUE@	$(am__DEPENDENCIES_5)
__top_builddir__bin_mkl_pwteleman_LINK = $(FCLD) \
	$(__top_builddir__bin_mkl_pwteleman_FCFLAGS) $(FCFLAGS) \
	$(__top_builddir__bin_mkl_pwteleman_LDFLAGS) $(LDFLAGS) -o $@
am____top_builddir__bin_netlib_pwteleman_SOURCES_DIST = main.F90
@USE_NETLIB_TRUE@am___top_builddir__bin_netlib_pwteleman_OBJECTS = __top_builddir__bin_netlib_pwteleman-main.$(OBJEXT)
__top_builddir__bin_netlib_pwteleman_OBJECTS =  \
	$(am___top_builddir__bin_netlib_pwteleman_OBJECTS)
@USE_NETLIB_TRUE@__top_builddir__bin_netlib_pwteleman_DEPENDENCIES =  \
@USE_NETLIB_TRUE@	$(OBJFFTPACK) $(OBJCOULSOLV) $(OBJCOMMON) \
@USE_NETLIB_TRUE@	$(am__DEPENDENCIES_5)
__top_builddir__bin_netlib_pwteleman_LINK = $(FCLD) \
	$(__top_builddir__bin_netlib_pwteleman_FCFLAGS) $(FCFLAGS) \
	$(__top_builddir__bin_netlib_pwteleman_LDFLAGS) $(LDFLAGS) -o \
	$@
AM_V_P = $(am__v_P_@AM_V@)
am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_@AM_V@)
am__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_@AM_V@)
am__v_at_ = $(am__v_at_@AM_DEFAULT_V@)
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
AM_V_lt = $(am__v_lt_@AM_V@)
am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)
am__v_lt_0 = --silent
am__v_lt_1 = 
PPFCCOMPILE = $(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_FCFLAGS) $(FCFLAGS)
AM_V_PPFC = $(am__v_PPFC_@AM_V@)
am__v_PPFC_ = $(am__v_PPFC_@AM_DEFAULT_V@)
am__v_PPFC_0 = @echo "  PPFC    " $@;
am__v_PPFC_1 = 
FCLD = $(FC)
FCLINK = $(FCLD) $(AM_FCFLAGS) $(FCFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o \
	$@
AM_V_FCLD = $(am__v_FCLD_@AM_V@)
am__v_FCLD_ = $(am__v_FCLD_@AM_DEFAULT_V@)
am__v_FCLD_0 = @echo "  FCLD    " $@;
am__v_FCLD_1 = 
SOURCES = $(__top_builddir__bin_fftw_pwteleman_SOURCES) \
	$(__top_builddir__bin_gpu_pwteleman_SOURCES) \
	$(__top_builddir__bin_mkl_pwteleman_SOURCES) \
	$(__top_builddir__bin_netlib_pwteleman_SOURCES)
DIST_SOURCES = $(am____top_builddir__bin_fftw_pwteleman_SOURCES_DIST) \
	$(am____top_builddir__bin_gpu_pwteleman_SOURCES_DIST) \
	$(am____top_builddir__bin_mkl_pwteleman_SOURCES_DIST) \
	$(am____top_builddir__bin_netlib_pwteleman_SOURCES_DIST)
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = @ACLOCAL@
AMTAR = @AMTAR@
AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AWK = @AWK@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CFLAGS = @CFLAGS@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CYGPATH_W = @CYGPATH_W@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DFFT = @DFFT@
DMPI = @DMPI@
DOMP = @DOMP@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
EXEEXT = @EXEEXT@
FC = @FC@
FCFLAGS = @FCFLAGS@
GREP = @GREP@
IDRIS = @IDRIS@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
LDFLAGS = @LDFLAGS@
LD_CUDA = @LD_CUDA@
LD_FFTW = @LD_FFTW@
LD_MPI = @LD_MPI@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LTLIBOBJS = @LTLIBOBJS@
MAKEINFO = @MAKEINFO@
MKDIR_P = @MKDIR_P@
NVCC_PATH = @NVCC_PATH@
OBJEXT = @OBJEXT@
OPENMP_FCFLAGS = @OPENMP_FCFLAGS@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
STRIP = @STRIP@
VERSION = @VERSION@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_CC = @ac_ct_CC@
ac_ct_FC = @ac_ct_FC@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
asynclaunch = @asynclaunch@
best_compiler = @best_compiler@
bindir = @bindir@
build_alias = @build_alias@
builddir = @builddir@
cmplxsic = @cmplxsic@
coudoub = @coudoub@
coudoub3D = @coudoub3D@
coufou = @coufou@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
findiff = @findiff@
found_compiler = @found_compiler@
gridfft = @gridfft@
host_alias = @host_alias@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
lda_gpu = @lda_gpu@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
numerov = @numerov@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
raregas = @raregas@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
twostsic = @twostsic@

########################################################################
# 									Program dependencies.
########################################################################
# List of additional files to be included in the final archive.
# I know source files should not be listed here, but as the code uses #include instruction to add .F90 sources files, 
# it ruins the normal dependency management of automake.
EXTRA_DIST = define.h\
						params.F90 surf.F90 pseudo.F90\
						fftpack.F90 fftpack2.F90\
						fftw.F90 fftw3.f03 cuda_alloc.F90\
						kinetic.F90 fft.F90 findiff.F90\
						coulsolv.F90 falr.F90 coulex.F90 findiff-sinft.F90\
						sicnew.F90 restart.F90 init.F90 generlcgo.F90\
						localize.F90 localize_rad.F90  static.F90\
						util.F90  orthmat.F90 2stUT.F90  \
						dynamic.F90 lda.F90 abso_bc.F90 \
						pseudosoft.F90 pseudogoed.F90 \
						ionmd.F90 forces.F90 carlo.F90\
						subgrids.F90 analyse.F90\
						rho.F90 nonloc.F90 schmid.F90 \
						zeroforce.F90 functions.F90\
						functions.F90 loc_mfield.F90\
						givens.F90 parallele.F90 expevol.F90\
						pot_substrate.F90 forces_substrate.F90 md_substrate.F90\
						short.F90 image.F90 lattice.F90 attachement.F90\
						cuda.cu define_cuda.h values_gpu.h params_gpu.h static_gpu.cu

@GFORT_TRUE@@USE_DEBUG_FALSE@OPT1 = -w -O3 -mfpmath=sse

# Compiler-dependent options
@GFORT_TRUE@@USE_DEBUG_TRUE@OPT1 = -pg -g -fbacktrace
@IFORT_TRUE@@USE_DEBUG_FALSE@OPT1 = -fpp -w -xW -O3 -ip -no-prec-div -align all
@IFORT_TRUE@@USE_DEBUG_TRUE@OPT1 = -pg -fpp -warn all -warn nodeclarations -g -CB -traceback -align all -autodouble
@MPIFORT_TRUE@@MPI_GFORT_TRUE@@USE_DEBUG_FALSE@OPT1 = -w -O3 -mfpmath=sse

# underlying compiler for mpif90
@MPIFORT_TRUE@@MPI_GFORT_TRUE@@USE_DEBUG_TRUE@OPT1 = -pg -g -fbacktrace -fdefault-real-8 -fdefault-double-8
@MPIFORT_TRUE@@MPI_IFORT_TRUE@@USE_DEBUG_FALSE@OPT1 = -fpp -w -xW -O3 -ip -no-prec-div -align all
@MPIFORT_TRUE@@MPI_IFORT_TRUE@@USE_DEBUG_TRUE@OPT1 = -pg -fpp -g -CB -traceback -align all -autodouble
@MPIFORT_TRUE@@MPI_XLF_R_TRUE@@USE_DEBUG_FALSE@OPT1 = -d -w -qport=mod -q64 -qarch=pwr6 -qtune=pwr6 -O3 -qstrict
@MPIFORT_TRUE@@MPI_XLF_R_TRUE@@USE_DEBUG_TRUE@OPT1 = -d -w -qport=mod -q64 -qarch=pwr6 -qtune=pwr6 -O3 -qstrict
#~ OPT1  =-fpp -w -axsse4.2 -msse4.2 -O3 -ip -no-prec-div -align all -autodouble
#~ OPT2  =-fpp -w -axsse4.2 -msse4.2 -O3 -ip -no-prec-div -align all -autodouble
#~ OPT3  =-fpp -w        -g                            -align all -autodouble
@XLF_R_TRUE@OPT1 = -d -w -qport=mod -q64 -qarch=pwr6 -qtune=pwr6 -O3 -qstrict
@GFORT_TRUE@@USE_DEBUG_FALSE@OPT2 = -w -O3 -mfpmath=sse
@GFORT_TRUE@@USE_DEBUG_TRUE@OPT2 = $(OPT1)
@IFORT_TRUE@@USE_DEBUG_FALSE@OPT2 = -fpp -w -xW -O3 -ip -no-prec-div -align all
@IFORT_TRUE@@USE_DEBUG_TRUE@OPT2 = -pg -fpp -warn all -warn nodeclarations -g -CB -traceback -align all -autodouble
@MPIFORT_TRUE@@MPI_GFORT_TRUE@@USE_DEBUG_FALSE@OPT2 = -w -O3 -mfpmath=sse
@MPIFORT_TRUE@@MPI_GFORT_TRUE@@USE_DEBUG_TRUE@OPT2 = $(OPT1)
@MPIFORT_TRUE@@MPI_IFORT_TRUE@@USE_DEBUG_FALSE@OPT2 = -fpp -w -xW -O3 -ip -no-prec-div -align all
@MPIFORT_TRUE@@MPI_IFORT_TRUE@@USE_DEBUG_TRUE@OPT2 = -pg -fpp -g -CB -traceback -align all -autodouble
@MPIFORT_TRUE@@MPI_XLF_R_TRUE@@USE_DEBUG_FALSE@OPT2 = -d -w -qport=mod -q64 -qarch=pwr6 -qtune=pwr6 -O3 -qstrict -qdpc -qautodbl=dbl
@MPIFORT_TRUE@@MPI_XLF_R_TRUE@@USE_DEBUG_TRUE@OPT2 = -d -w -qport=mod -q64 -qarch=pwr6 -qtune=pwr6 -O3 -qstrict -qdpc -qautodbl=dbl
@XLF_R_TRUE@OPT2 = -d -w -qport=mod -q64 -qarch=pwr6 -qtune=pwr6 -O3 -qstrict -qdpc -qautodbl=dbl
@GFORT_TRUE@@USE_DEBUG_FALSE@OPT3 = -w -g  
@GFORT_TRUE@@USE_DEBUG_TRUE@OPT3 = $(OPT2)
@IFORT_TRUE@@USE_DEBUG_FALSE@OPT3 = -fpp -w       -g                 -align all
@IFORT_TRUE@@USE_DEBUG_TRUE@OPT3 = -pg -fpp -warn all -warn nodeclarations -g                -align all -autodouble
@MPIFORT_TRUE@@MPI_GFORT_TRUE@@USE_DEBUG_FALSE@OPT3 = -w -g  
@MPIFORT_TRUE@@MPI_GFORT_TRUE@@USE_DEBUG_TRUE@OPT3 = $(OPT2)
@MPIFORT_TRUE@@MPI_IFORT_TRUE@@USE_DEBUG_FALSE@OPT3 = -fpp -w       -g                 -align all
@MPIFORT_TRUE@@MPI_IFORT_TRUE@@USE_DEBUG_TRUE@OPT3 = -pg -fpp -g -CB -traceback -align all -autodouble
@MPIFORT_TRUE@@MPI_XLF_R_TRUE@@USE_DEBUG_FALSE@OPT3 = -d -w -qport=mod -q64 -qarch=pwr6 -qtune=pwr6
@MPIFORT_TRUE@@MPI_XLF_R_TRUE@@USE_DEBUG_TRUE@OPT3 = -d -w -qport=mod -q64 -qarch=pwr6 -qtune=pwr6
@XLF_R_TRUE@OPT3 = -d -w -qport=mod -q64 -qarch=pwr6 -qtune=pwr6
#OPTGPU = -O3 --gpu-architecture sm_13 
#OPTGPU = -O3 --gpu-architecture sm_20 
#OPTGPU = -O3 --gpu-architecture sm_30 
@USE_CUDA_TRUE@@USE_DEBUG_FALSE@OPTGPU = -O3 --gpu-architecture sm_35  -maxrregcount=72 --use_fast_math --ptxas-options=-v 

#OPTGPU = -g -G --gpu-architecture sm_13 
#~ OPTGPU = -g -G --gpu-architecture sm_20 
#OPTGPU = -g -G --gpu-architecture sm_30 
@USE_CUDA_TRUE@@USE_DEBUG_TRUE@OPTGPU = -g -G --gpu-architecture sm_35 
#for CCC with older GPU cards 
# OPTGPU = -O3 --gpu-architecture sm_20  -maxrregcount=20 --use_fast_math --ptxas-options=-v
#endif
@USE_STATIC_TRUE@@XLF_R_FALSE@STATIC = -static
#FFT type dependent options
#~ LDLIBS=-L/usr/local/FFTW/fftw-3.3.3/lib

#Compiler options
COMPILERFLAGS1 = $(STATIC) $(OPENMP_FCFLAGS) $(OPT1) $(DMPI) $(DOMP) $(DFFT) $(FCFLAGS)
COMPILERFLAGS2 = $(STATIC) $(OPENMP_FCFLAGS) $(OPT2) $(DMPI) $(DOMP) $(DFFT) $(FCFLAGS)
COMPILERFLAGS3 = $(STATIC) $(OPENMP_FCFLAGS) $(OPT3) $(DMPI) $(DOMP) $(DFFT) $(FCFLAGS)
@USE_CUDA_TRUE@GPUCOMPILERFLAGS = $(OPTGPU) $(DMPI) $(DOMP)
#default compilation rules 
AM_FCFLAGS = $(COMPILERFLAGS1)

#default linker flags
LDLIBS = $(am__append_2) $(am__append_3) $(am__append_4)
LINKERFLAGS = -I. $(am__append_1)
DEPENDENCIES = define.h
########################################################################
#						 libraries list
########################################################################
# FFT libraries
@USE_NETLIB_TRUE@OBJFFTPACK = fftpack.$(OBJEXT)
@CALLS_FFTW_TRUE@OBJFFTW = fftw.$(OBJEXT)
@USE_CUDA_TRUE@OBJCUDA = cuda.$(OBJEXT) cuda_alloc.$(OBJEXT)
@USE_CUDA_TRUE@GPU_COMPILER = nvcc
@USE_CUDA_FALSE@OBJCOULSOLV = coulsolv.$(OBJEXT)
########################################################################
# 		        	Program name and complation rules
########################################################################
OBJKINPARA = params.$(OBJEXT) kinetic.$(OBJEXT)
OBJCOMMON = $(OBJKINPARA) restart.$(OBJEXT) restartc.$(OBJEXT) \
	static.$(OBJEXT) dynamic.$(OBJEXT) lda.$(OBJEXT) \
	util.$(OBJEXT) abso_bc.$(OBJEXT) pseudosoft.$(OBJEXT) \
	pseudogoed.$(OBJEXT) ionmd.$(OBJEXT) forces.$(OBJEXT) \
	carlo.$(OBJEXT) localize.$(OBJEXT) localizer.$(OBJEXT) \
	subgrids.$(OBJEXT) analyse.$(OBJEXT) rho.$(OBJEXT) \
	rhoc.$(OBJEXT) nonloc.$(OBJEXT) nonlocc.$(OBJEXT) \
	schmid.$(OBJEXT) zeroforce.$(OBJEXT) functions.$(OBJEXT) \
	loc_mfield.$(OBJEXT) givens.$(OBJEXT) parallele.$(OBJEXT) \
	expevol.$(OBJEXT) pot_substrate.$(OBJEXT) \
	forces_substrate.$(OBJEXT) md_substrate.$(OBJEXT) \
	short.$(OBJEXT) image.$(OBJEXT) lattice.$(OBJEXT) \
	attachement.$(OBJEXT) sicnew.$(OBJEXT) sicnewc.$(OBJEXT) \
	init.$(OBJEXT) generlcgo.$(OBJEXT) 2stUT.$(OBJEXT) \
	orthmat.$(OBJEXT) $(am__append_5)
@USE_NETLIB_TRUE@__top_builddir__bin_netlib_pwteleman_SOURCES = main.F90
@USE_NETLIB_TRUE@__top_builddir__bin_netlib_pwteleman_FCFLAGS = $(COMPILERFLAGS1) 
@USE_NETLIB_TRUE@__top_builddir__bin_netlib_pwteleman_LDADD = $(OBJFFTPACK) $(OBJCOULSOLV) $(OBJCOMMON) $(LDLIBS)
@USE_NETLIB_TRUE@__top_builddir__bin_netlib_pwteleman_LDFLAGS = $(LINKERFLAGS)
@USE_FFTW_TRUE@__top_builddir__bin_fftw_pwteleman_SOURCES = main.F90
@USE_FFTW_TRUE@__top_builddir__bin_fftw_pwteleman_FCFLAGS = $(COMPILERFLAGS1) 
@USE_FFTW_TRUE@__top_builddir__bin_fftw_pwteleman_LDADD = $(OBJFFTW) $(OBJCOULSOLV)  $(OBJCOMMON) $(LDLIBS)
@USE_FFTW_TRUE@__top_builddir__bin_fftw_pwteleman_LDFLAGS = $(LINKERFLAGS)
@USE_MKL_TRUE@__top_builddir__bin_mkl_pwteleman_SOURCES = main.F90
@USE_MKL_TRUE@__top_builddir__bin_mkl_pwteleman_FCFLAGS = $(COMPILERFLAGS1)
@USE_MKL_TRUE@__top_builddir__bin_mkl_pwteleman_LDADD = $(OBJFFTW) $(OBJCOULSOLV)  $(OBJCOMMON) $(LDLIBS)
@USE_MKL_TRUE@__top_builddir__bin_mkl_pwteleman_LDFLAGS = $(LINKERFLAGS)
@USE_CUDA_TRUE@__top_builddir__bin_gpu_pwteleman_SOURCES = main.F90
@USE_CUDA_TRUE@__top_builddir__bin_gpu_pwteleman_FCFLAGS = $(COMPILERFLAGS1) 
@USE_CUDA_TRUE@__top_builddir__bin_gpu_pwteleman_LDADD = $(OBJCUDA) $(OBJCOMMON) $(LDLIBS)
@USE_CUDA_TRUE@__top_builddir__bin_gpu_pwteleman_LDFLAGS = $(LINKERFLAGS)

#~ initial_checks: makefile define.mk define.h
#~ 	@echo "#######################################################"
#~ 	@echo  Lists of known compilation parameters.
#~ 	@echo "#######################################################"
#~ 	@echo  Parameters defined in define.h:
#~ 	@echo "--------------------------------------------"
#~ 	@echo "gridfft       $(gridfft_value)"
#~ 	@echo "findiff       $(findiff_value)"
#~ 	@echo "numerov       $(numerov_value)"
#~ 	@echo "coufou        $(coufou_value)"
#~ 	@echo "coudoub       $(coudoub_value)"
#~ 	@echo "coudoub3D     $(coudoub3D_value)"
#~ 	@echo "twostsic      $(twostsic_value)"
#~ 	@echo "raregas       $(raregas_value)"
#~ 	@echo "lda_gpu       $(lda_gpu_value)"
#~ 	@echo "#######################################################"
#~ 	@echo  Parameters defined in makefile / define.mk:
#~ 	@echo "--------------------------------------------"
#~ 	@echo "CF90          $(CF90)"
#~ 	@echo "MPI_PARALLEL  $(MPI_PARALLEL)"
#~ 	@echo "OMP_THREADS   $(OMP_THREADS)"
#~ 	@echo "TYPE_FFT      $(TYPE_FFT)"
#~ 	@echo "DEBUG         $(DEBUG)"
#~ 	@echo "LINK_STATIC   $(LINK_STATIC)"
#~ 	@echo "MKL_THREADS   $(MKL_THREADS)"
#~ 	@echo "MKL_WRAPPERS  $(MKL_WRAPPERS)"
#~ 	@echo "MKLPATH       $(MKLPATH)"
#~ 	@echo "MKLINCLUDE    $(MKLINCLUDE)"
#~ 	@echo "#######################################################"
#~ 	@echo "-D flags enabled (1) by makefile rules:"
#~ 	@echo "--------------------------------------------"
#~ 	@echo "parayes       $(parayes_value)"
#~ 	@echo "parano        $(parano_value)"
#~ 	@echo "simpara       $(simpara_value)"
#~ 	@echo "netlib_fft    $(netlib_fft_value)"
#~ 	@echo "fftw_cpu      $(fftw_cpu_value)"
#~ 	@echo "fftw_gpu      $(fftw_gpu_value)"
#~ 	@echo "fftwnomkl     $(fftwnomkl_value)"
#~ 	@echo "paropenmp     $(paropenmp_value)"
#~ 	@echo "dynopenmp     $(dynopenmp_value)"
#~ 	@echo "#######################################################"
CLEANFILES = *.mod *.MOD
all: all-am

.SUFFIXES:
.SUFFIXES: .F90 .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign code/source_f90/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign code/source_f90/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(bindir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(bindir)" || exit 1; \
	fi; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p \
	  ; then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' \
	    -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	      echo " $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	      $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' \
	`; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
$(top_builddir)/bin/$(am__dirstamp):
	@$(MKDIR_P) $(top_builddir)/bin
	@: > $(top_builddir)/bin/$(am__dirstamp)

$(top_builddir)/bin/fftw_pwteleman$(EXEEXT): $(__top_builddir__bin_fftw_pwteleman_OBJECTS) $(__top_builddir__bin_fftw_pwteleman_DEPENDENCIES) $(EXTRA___top_builddir__bin_fftw_pwteleman_DEPENDENCIES) $(top_builddir)/bin/$(am__dirstamp)
	@rm -f $(top_builddir)/bin/fftw_pwteleman$(EXEEXT)
	$(AM_V_FCLD)$(__top_builddir__bin_fftw_pwteleman_LINK) $(__top_builddir__bin_fftw_pwteleman_OBJECTS) $(__top_builddir__bin_fftw_pwteleman_LDADD) $(LIBS)

$(top_builddir)/bin/gpu_pwteleman$(EXEEXT): $(__top_builddir__bin_gpu_pwteleman_OBJECTS) $(__top_builddir__bin_gpu_pwteleman_DEPENDENCIES) $(EXTRA___top_builddir__bin_gpu_pwteleman_DEPENDENCIES) $(top_builddir)/bin/$(am__dirstamp)
	@rm -f $(top_builddir)/bin/gpu_pwteleman$(EXEEXT)
	$(AM_V_FCLD)$(__top_builddir__bin_gpu_pwteleman_LINK) $(__top_builddir__bin_gpu_pwteleman_OBJECTS) $(__top_builddir__bin_gpu_pwteleman_LDADD) $(LIBS)

$(top_builddir)/bin/mkl_pwteleman$(EXEEXT): $(__top_builddir__bin_mkl_pwteleman_OBJECTS) $(__top_builddir__bin_mkl_pwteleman_DEPENDENCIES) $(EXTRA___top_builddir__bin_mkl_pwteleman_DEPENDENCIES) $(top_builddir)/bin/$(am__dirstamp)
	@rm -f $(top_builddir)/bin/mkl_pwteleman$(EXEEXT)
	$(AM_V_FCLD)$(__top_builddir__bin_mkl_pwteleman_LINK) $(__top_builddir__bin_mkl_pwteleman_OBJECTS) $(__top_builddir__bin_mkl_pwteleman_LDADD) $(LIBS)

$(top_builddir)/bin/netlib_pwteleman$(EXEEXT): $(__top_builddir__bin_netlib_pwteleman_OBJECTS) $(__top_builddir__bin_netlib_pwteleman_DEPENDENCIES) $(EXTRA___top_builddir__bin_netlib_pwteleman_DEPENDENCIES) $(top_builddir)/bin/$(am__dirstamp)
	@rm -f $(top_builddir)/bin/netlib_pwteleman$(EXEEXT)
	$(AM_V_FCLD)$(__top_builddir__bin_netlib_pwteleman_LINK) $(__top_builddir__bin_netlib_pwteleman_OBJECTS) $(__top_builddir__bin_netlib_pwteleman_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

.F90.o:
	$(AM_V_PPFC)$(PPFCCOMPILE) -c -o $@ $<

.F90.obj:
	$(AM_V_PPFC)$(PPFCCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

__top_builddir__bin_fftw_pwteleman-main.o: main.F90
	$(AM_V_PPFC)$(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(__top_builddir__bin_fftw_pwteleman_FCFLAGS) $(FCFLAGS) -c -o __top_builddir__bin_fftw_pwteleman-main.o `test -f 'main.F90' || echo '$(srcdir)/'`main.F90

__top_builddir__bin_fftw_pwteleman-main.obj: main.F90
	$(AM_V_PPFC)$(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(__top_builddir__bin_fftw_pwteleman_FCFLAGS) $(FCFLAGS) -c -o __top_builddir__bin_fftw_pwteleman-main.obj `if test -f 'main.F90'; then $(CYGPATH_W) 'main.F90'; else $(CYGPATH_W) '$(srcdir)/main.F90'; fi`

__top_builddir__bin_gpu_pwteleman-main.o: main.F90
	$(AM_V_PPFC)$(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(__top_builddir__bin_gpu_pwteleman_FCFLAGS) $(FCFLAGS) -c -o __top_builddir__bin_gpu_pwteleman-main.o `test -f 'main.F90' || echo '$(srcdir)/'`main.F90

__top_builddir__bin_gpu_pwteleman-main.obj: main.F90
	$(AM_V_PPFC)$(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(__top_builddir__bin_gpu_pwteleman_FCFLAGS) $(FCFLAGS) -c -o __top_builddir__bin_gpu_pwteleman-main.obj `if test -f 'main.F90'; then $(CYGPATH_W) 'main.F90'; else $(CYGPATH_W) '$(srcdir)/main.F90'; fi`

__top_builddir__bin_mkl_pwteleman-main.o: main.F90
	$(AM_V_PPFC)$(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(__top_builddir__bin_mkl_pwteleman_FCFLAGS) $(FCFLAGS) -c -o __top_builddir__bin_mkl_pwteleman-main.o `test -f 'main.F90' || echo '$(srcdir)/'`main.F90

__top_builddir__bin_mkl_pwteleman-main.obj: main.F90
	$(AM_V_PPFC)$(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(__top_builddir__bin_mkl_pwteleman_FCFLAGS) $(FCFLAGS) -c -o __top_builddir__bin_mkl_pwteleman-main.obj `if test -f 'main.F90'; then $(CYGPATH_W) 'main.F90'; else $(CYGPATH_W) '$(srcdir)/main.F90'; fi`

__top_builddir__bin_netlib_pwteleman-main.o: main.F90
	$(AM_V_PPFC)$(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(__top_builddir__bin_netlib_pwteleman_FCFLAGS) $(FCFLAGS) -c -o __top_builddir__bin_netlib_pwteleman-main.o `test -f 'main.F90' || echo '$(srcdir)/'`main.F90

__top_builddir__bin_netlib_pwteleman-main.obj: main.F90
	$(AM_V_PPFC)$(FC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(__top_builddir__bin_netlib_pwteleman_FCFLAGS) $(FCFLAGS) -c -o __top_builddir__bin_netlib_pwteleman-main.obj `if test -f 'main.F90'; then $(CYGPATH_W) 'main.F90'; else $(CYGPATH_W) '$(srcdir)/main.F90'; fi`

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)
	-test -z "$(top_builddir)/bin/$(am__dirstamp)" || rm -f $(top_builddir)/bin/$(am__dirstamp)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am check check-am clean \
	clean-binPROGRAMS clean-generic cscopelist-am ctags ctags-am \
	distclean distclean-compile distclean-generic distclean-tags \
	distdir dvi dvi-am html html-am info info-am install \
	install-am install-binPROGRAMS install-data install-data-am \
	install-dvi install-dvi-am install-exec install-exec-am \
	install-html install-html-am install-info install-info-am \
	install-man install-pdf install-pdf-am install-ps \
	install-ps-am install-strip installcheck installcheck-am \
	installdirs maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-compile mostlyclean-generic pdf pdf-am \
	ps ps-am tags tags-am uninstall uninstall-am \
	uninstall-binPROGRAMS

@USE_NETLIB_TRUE@__top_builddir__bin_netlib_pwteleman-main.$(OBJEXT): $(OBJFFTPACK) $(OBJCOULSOLV)  $(OBJKINPARA) $(OBJCOMMON)
@USE_FFTW_TRUE@__top_builddir__bin_fftw_pwteleman-main.$(OBJEXT): $(OBJFFTW) $(OBJCOULSOLV) $(OBJKINPARA) $(OBJCOMMON)
@USE_MKL_TRUE@__top_builddir__bin_mkl_pwteleman-main.$(OBJEXT): $(OBJFFTW) $(OBJCOULSOLV) $(OBJKINPARA) $(OBJCOMMON)
@USE_CUDA_TRUE@__top_builddir__bin_gpu_pwteleman-main.$(OBJEXT): $(OBJCUDA) $(OBJCOMMON)

########################################################################
#               Compilation rules for objects
########################################################################       
# Dependencies concerning objects are needed,  due to numerous #include statement.
# This breaks the normal dependencies tracking, hence the lists of source files above. 

# params.o
params.$(OBJEXT): params.F90 define.h surf.F90 pseudo.F90 Makefile
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $< 

# fftpack.o
fftpack.$(OBJEXT): fftpack.F90 define.h fftpack2.F90 params.$(OBJEXT) Makefile
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS2) -c -o $@ $<

# fftw.o
fftw.$(OBJEXT): fftw.F90 define.h fftw3.f03 params.$(OBJEXT) Makefile
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<

# cuda_alloc.o
cuda_alloc.$(OBJEXT): cuda_alloc.F90 Makefile
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<

#kinetic.o
@USE_NETLIB_TRUE@kinetic.$(OBJEXT): kinetic.F90 define.h fft.F90 findiff.F90 $(OBJFFTPACK) params.$(OBJEXT) Makefile
@USE_NETLIB_TRUE@	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<
@CALLS_FFTW_TRUE@kinetic.$(OBJEXT): kinetic.F90 define.h fft.F90 findiff.F90 $(OBJFFTW) params.$(OBJEXT)  Makefile
@CALLS_FFTW_TRUE@	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<
@USE_CUDA_TRUE@kinetic.$(OBJEXT): kinetic.F90 define.h fft.F90 findiff.F90  $(OBJCUDA) params.$(OBJEXT) Makefile
@USE_CUDA_TRUE@	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<

# coulsolv.o
@USE_NETLIB_TRUE@coulsolv.$(OBJEXT): coulsolv.F90 define.h falr.F90 coulex.F90 findiff-sinft.F90 $(OBJFFTPACK) params.$(OBJEXT) Makefile
@USE_NETLIB_TRUE@	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<
@CALLS_FFTW_TRUE@coulsolv.$(OBJEXT): coulsolv.F90 define.h falr.F90 coulex.F90 findiff-sinft.F90 $(OBJFFTW) $(OBJKINPARA) Makefile
@CALLS_FFTW_TRUE@	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<
# coulsolv does not work with cuda (yet ?)
#~ if USE_CUDA
#~ coulsolv.$(OBJEXT): coulsolv.F90 define.h falr.F90 coulex.F90 findiff-sinft.F90 $(OBJCUDA) params.o Makefile
#~ 	$(FC) $(COMPILERFLAGS1) -c -o $@ $< $(AM_LDFLAGS)
#~ endif

# sicnew.o
sicnew.$(OBJEXT): sicnew.F90 define.h $(OBJCOULSOLV) $(OBJKINPARA)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) $(IDRIS) -DREALSWITCH -c -o $@ $<

# sicnewc.o
sicnewc.$(OBJEXT): sicnew.F90 define.h $(OBJCOULSOLV) $(OBJKINPARA)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) $(IDRIS) -DCOMPLEXSWITCH -c -o $@ $<

# restart.o
@USE_TWOSTSIC_TRUE@restart.$(OBJEXT): restart.F90 define.h 2stUTc.$(OBJEXT) 2stUT.$(OBJEXT) $(OBJKINPARA)
@USE_TWOSTSIC_TRUE@	$(FC) $(CPPFLAGS) $(COMPILERFLAGS3) $(IDRIS) -DREALSWITCH -c -o $@ $<
@USE_TWOSTSIC_FALSE@restart.$(OBJEXT): restart.F90 define.h $(OBJKINPARA)
@USE_TWOSTSIC_FALSE@	$(FC) $(CPPFLAGS) $(COMPILERFLAGS3) $(IDRIS) -DREALSWITCH -c -o $@ $<

# restartc.o
restartc.$(OBJEXT): restart.F90 define.h $(OBJKINPARA)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS3) $(IDRIS) -DCOMPLEXSWITCH -c -o $@ $<

# init.o
init.$(OBJEXT): init.F90 define.h $(OBJCOULSOLV) $(OBJKINPARA)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<

# generlcgo.o
generlcgo.$(OBJEXT): generlcgo.F90 define.h params.$(OBJEXT)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<

# localize.o
localize.$(OBJEXT): localize.F90 define.h $(OBJKINPARA)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) $(IDRIS) -DCOMPLEXSWITCH -c -o $@ $<

# localizer.o
localizer.$(OBJEXT): localize.F90 define.h $(OBJKINPARA)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) $(IDRIS) -DREALSWITCH -c -o $@ $<

# localize_rad.o
localize_rad.$(OBJEXT): localize_rad.F90 define.h orthmat.$(OBJEXT) $(OBJKINPARA)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) $(IDRIS) -DREALSWITCH -c -o $@ $<

# static.o
@USE_CUDA_TRUE@@USE_TWOSTSIC_TRUE@static.$(OBJEXT): static.F90 define.h cuda_alloc.$(OBJEXT) 2stUT.$(OBJEXT) localize_rad.$(OBJEXT) pseudosoft.$(OBJEXT) $(OBJKINPARA)
@USE_CUDA_TRUE@@USE_TWOSTSIC_TRUE@	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) $(IDRIS) -DREALSWITCH -c -o $@ $<
@USE_CUDA_TRUE@@USE_TWOSTSIC_FALSE@static.$(OBJEXT): static.F90 define.h cuda_alloc.$(OBJEXT) pseudosoft.$(OBJEXT) $(OBJKINPARA)
@USE_CUDA_TRUE@@USE_TWOSTSIC_FALSE@	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<
@USE_CUDA_FALSE@@USE_TWOSTSIC_TRUE@static.$(OBJEXT): static.F90 define.h 2stUT.$(OBJEXT) localize_rad.$(OBJEXT) pseudosoft.$(OBJEXT) $(OBJKINPARA) $(OBJCOULSOLV)
@USE_CUDA_FALSE@@USE_TWOSTSIC_TRUE@	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<
@USE_CUDA_FALSE@@USE_TWOSTSIC_FALSE@static.$(OBJEXT): static.F90 define.h  pseudosoft.$(OBJEXT) $(OBJKINPARA) $(OBJCOULSOLV)
@USE_CUDA_FALSE@@USE_TWOSTSIC_FALSE@	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<

# orthmat.o
orthmat.$(OBJEXT): orthmat.F90 define.h params.$(OBJEXT)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<

# 2stUT.o
@USE_TWOSTSIC_TRUE@2stUT.$(OBJEXT): 2stUT.F90 define.h localize_rad.$(OBJEXT)  orthmat.$(OBJEXT) $(OBJKINPARA)
@USE_TWOSTSIC_TRUE@	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) $(IDRIS) -DREALSWITCH -c -o $@ $<
@USE_TWOSTSIC_FALSE@2stUT.$(OBJEXT): 2stUT.F90 define.h  orthmat.$(OBJEXT) $(OBJKINPARA)
@USE_TWOSTSIC_FALSE@	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) $(IDRIS) -DREALSWITCH -c -o $@ $<

# 2stUTc.o 
2stUTc.$(OBJEXT): 2stUT.F90 define.h 2stUT.$(OBJEXT) orthmat.$(OBJEXT) $(OBJKINPARA)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) $(IDRIS) -DCOMPLEXSWITCH -c -o $@ $<

# dynamic.o
@USE_TWOSTSIC_TRUE@dynamic.$(OBJEXT): dynamic.F90 define.h  2stUTc.$(OBJEXT) 2stUT.$(OBJEXT) orthmat.$(OBJEXT) $(OBJKINPARA)
@USE_TWOSTSIC_TRUE@	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<
@USE_TWOSTSIC_FALSE@dynamic.$(OBJEXT): dynamic.F90 define.h $(OBJKINPARA)
@USE_TWOSTSIC_FALSE@	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<
# lda.o
lda.$(OBJEXT): lda.F90 define.h $(OBJCOULSOLV) params.$(OBJEXT)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<

# util.o
util.$(OBJEXT): util.F90 define.h params.$(OBJEXT)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<

# abso_bc.o
abso_bc.$(OBJEXT): abso_bc.F90 define.h params.$(OBJEXT)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<

# pseudosoft.o
pseudosoft.$(OBJEXT): pseudosoft.F90 define.h $(OBJCOULSOLV) $(OBJKINPARA)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<

# pseudogoed.o
pseudogoed.$(OBJEXT): pseudogoed.F90 params.$(OBJEXT) define.h
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $< 

# ionmd.o
ionmd.$(OBJEXT): ionmd.F90 define.h $(OBJKINPARA)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<

# forces.o
forces.$(OBJEXT): forces.F90 define.h params.$(OBJEXT)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<

# carlo.o  #Beware, perhaps implicitly dependent to parallele.F90 ?
carlo.$(OBJEXT): carlo.F90 define.h params.$(OBJEXT)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<

# subgrids.o
subgrids.$(OBJEXT): subgrids.F90 define.h params.$(OBJEXT)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<

# analyse.o
analyse.$(OBJEXT): analyse.F90 define.h params.$(OBJEXT)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<

# rho.o
rho.$(OBJEXT): rho.F90 define.h $(OBJKINPARA)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) $(IDRIS) -DREALSWITCH -c -o $@ $<

# rhoc.o
rhoc.$(OBJEXT): rho.F90 define.h $(OBJKINPARA)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) $(IDRIS) -DCOMPLEXSWITCH -c -o $@ $<

# nonloc.o 
nonloc.$(OBJEXT): nonloc.F90 define.h params.$(OBJEXT)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) $(IDRIS) -DREALSWITCH -c -o $@ $<

# nonlocc.o 
nonlocc.$(OBJEXT): nonloc.F90 define.h params.$(OBJEXT)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) $(IDRIS) -DCOMPLEXSWITCH -c -o $@ $<

# schmid.o
schmid.$(OBJEXT): schmid.F90 define.h params.$(OBJEXT)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<

# zeroforce.o
zeroforce.$(OBJEXT): zeroforce.F90 define.h $(OBJKINPARA)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<

# functions.o
functions.$(OBJEXT): functions.F90 define.h params.$(OBJEXT)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<

# loc_mfield.o
loc_mfield.$(OBJEXT): loc_mfield.F90 define.h $(OBJCOULSOLV) $(OBJKINPARA)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<

# givens.o 
givens.$(OBJEXT): givens.F90 define.h params.$(OBJEXT)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS3) -c -o $@ $<

# parallele.o
parallele.$(OBJEXT): parallele.F90 define.h $(OBJKINPARA)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS3) -c -o $@ $<

# expevol.o
@USE_TWOSTSIC_TRUE@expevol.$(OBJEXT): expevol.F90 define.h 2stUTc.$(OBJEXT) $(OBJKINPARA)
@USE_TWOSTSIC_TRUE@	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<
@USE_TWOSTSIC_FALSE@expevol.$(OBJEXT): expevol.F90 define.h  $(OBJKINPARA)
@USE_TWOSTSIC_FALSE@	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<

# pot_substrate.o
pot_substrate.$(OBJEXT): pot_substrate.F90 define.h params.$(OBJEXT)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<

# forces_substrate.o
forces_substrate.$(OBJEXT): forces_substrate.F90 define.h params.$(OBJEXT)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<

# md_substrate.o
md_substrate.$(OBJEXT): md_substrate.F90 define.h params.$(OBJEXT)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<

# short.o
short.$(OBJEXT): short.F90 define.h params.$(OBJEXT)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<

# image.o
image.$(OBJEXT): image.F90 define.h $(OBJCOULSOLV) params.$(OBJEXT)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<

# lattice.o
lattice.$(OBJEXT): lattice.F90 define.h params.$(OBJEXT)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<

# attachement.o
attachement.$(OBJEXT): attachement.F90 define.h params.$(OBJEXT)
	$(FC) $(CPPFLAGS) $(COMPILERFLAGS1) -c -o $@ $<

#cuda.o
cuda.$(OBJEXT): cuda.cu define_cuda.h values_gpu.h params_gpu.h static_gpu.cu
	$(GPU_COMPILER) $(CPPFLAGS) $(GPUCOMPILERFLAGS) -c -o $@ $<

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
